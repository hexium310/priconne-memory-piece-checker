#!/usr/bin/env zsh

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 6)
bold=$(tput bold)
reset=$(tput sgr0)

read-operation() {
    local message="$green${bold}Select operation$reset"

    echo $message >&2

    local input
    input=$({
        echo "${yellow}0$reset Exit"
        echo "${yellow}1$reset Add character"
        echo "${yellow}2$reset Edit character unique equipment"
        echo "${yellow}3$reset Edit character piece type"
        echo "${yellow}4$reset Edit character max rarity"
    } | fzf --ansi --reverse)
    [[ $? = 130 ]] && input='0 Exit'

    tput cuu 1 >&2
    echo "$message $input" >&2

    awk '{ print $1 }' <<< $input
}

add-character() {
    local name initial_rarity max_rarity has_unique_equipment piece_type
    local confirm

    input-data name initial_rarity max has_unique_equipment piece_type

    local data=$(build-data "$name" "$initial_rarity" "$max_rarity" "$has_unique_equipment" "$piece_type")
    echo
    echo $data
    echo -n "${green}Do you insert data above? (Y/n)$reset > "
    read -k 1 confirm
    echo
    case $confirm in
        [yY]|$'\n')
            insert-character "$data"
            ;;
        *)
            ;;
    esac
}

input-data() {
    local arguments=$@
    echo "$green${bold}Input character information$reset" >&2

    [[ -n ${(Q)${(z)arguments[(r)name]}} ]] && {
        echo 'Name (string)' >&2
        echo -n '> ' >&2
        read name
    }

    [[ -n ${(Q)${(z)arguments[(r)initial_rarity]}} ]] && while ! validate-number "$initial_rarity"; do
        echo 'Initial Rarity (number)' >&2
        echo -n '> ' >&2
        read initial_rarity
    done

    [[ -n ${(Q)${(z)arguments[(r)max_rarity]}} ]] && while ! validate-number "$max_rarity"; do
        echo 'Max Rarity (number)' >&2
        echo -n '> ' >&2
        read max_rarity
    done

    [[ -n ${(Q)${(z)arguments[(r)has_unique_equipment]}} ]] && {
        echo 'Unique Equipment (y/N)' >&2
        echo -n '> ' >&2
        if $(read -q); then
            has_unique_equipment=true
        else
            has_unique_equipment=false
        fi
        echo
    }

    [[ -n ${(Q)${(z)arguments[(r)piece_type]}} ]] && {
        echo 'Piece Type (string)' >&2
        echo -n '> ' >&2
        read piece_type
    }
}

build-data() {
    local name=$1
    local initial_rarity=$2
    local max_rarity=$3
    local has_unique_equipment=$4
    local piece_type=$5
    shift 5

    cat << DATA
  {
    name: '$name',
    initialRarity: $initial_rarity,
    maxRarity: $max_rarity,
    hasUniqueEquipment: $has_unique_equipment,
    pieceType: '$piece_type',
  },
DATA
}

insert-character() {
    local input=$1
    shift

    sed -i '' '$d' data/character.ts
    echo $input >> data/character.ts
    echo '];' >> data/character.ts
}

validate-number() {
    local input=$1
    shift

    [[ $input =~ [[:digit:]]+ ]]
}

edit-character() {
    local name
    local -A keys=(
        'has_unique_equipment' 'hasUniqueEquipment'
        'piece_type' 'pieceType'
        'max_rarity' 'maxRarity'
    )
    local kind=$1
    local $kind
    local key=${keys[$kind]}
    shift

    echo "$green${bold}Enter the character name to change ${${kind/has_/}/_/ }$reset"

    while true; do
        echo -n 'Name (empty: cancel) > '
        read name
        [[ -z $name ]] && return
        if grep "'$name'" data/character.ts > /dev/null; then
            break
        else
            echo "$name is not found"
        fi
    done

    input-data $kind
    local value=${(P)kind}
    edit-$key "$name" "$value"

    echo "$bold$red$key$reset$bold of $red$name$reset$bold was changed to $value$reset"
}

edit-hasUniqueEquipment() {
    local name=$1
    local value=$2
    shift 2

    edit-data '+normal /hasUniqueEquipment' "+normal Wciw$value"
}

edit-maxRarity() {
    local name=$1
    local value=$2
    shift 2

    edit-data '+normal /maxRarity' "+normal Wciw$value"
}

edit-pieceType() {
    local name=$1
    local value=$2
    shift 2

    # TODO: `pieceType: string | string[]` -> `pieceType: string[]`
    # edit-data '+normal /pieceType' "+normal Wi[f,i, '$value']"
}

edit-data() {
    vim -es "+normal /'$name'" $@ '+wq' data/character.ts
}

run() {
    local input=$(read-operation)

    case $input in
        0)
            git diff data/character.ts
            return 0
            ;;
        1)
            add-character
            ;;
        2)
            edit-character has_unique_equipment
            ;;
        3)
            edit-character piece_type
            ;;
        4)
            edit-character max_rarity
            ;;
        *)
            ;;
    esac

    run
}

run
